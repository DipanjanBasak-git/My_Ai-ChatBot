"use client";
import React, { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Menu, Paperclip, X } from "lucide-react";

type Message = {
  id: string;
  sender: "user" | "ai" | "system";
  text: string;
};

const ChatBot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState<string>("");
  const [isTyping, setIsTyping] = useState<boolean>(false);
  const [historyOpen, setHistoryOpen] = useState<boolean>(false);
  const [parsedPdfText, setParsedPdfText] = useState<string>("");
  const [fileName, setFileName] = useState<string>("");
  const fileInputRef = useRef<HTMLInputElement>(null);
  const bottomRef = useRef<HTMLDivElement>(null);

  const GEMINI_API_KEY = "Your API Key";
  const MODEL_ID = "gemini-1.5-flash";

  const handleSend = async () => {
    if (!input.trim() && !parsedPdfText) return;

    // Show user message only for typed text, not parsed content
    if (input.trim()) {
      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), sender: "user", text: input.trim() },
      ]);
    }

    setInput("");
    setIsTyping(true);

    try {
      let finalInputToSend = "";

      if (input.trim() && parsedPdfText) {
        finalInputToSend = `${input.trim()}\n\n[Attached Document Content]\n${parsedPdfText}`;
      } else if (input.trim()) {
        finalInputToSend = input.trim();
      } else if (parsedPdfText) {
        finalInputToSend = parsedPdfText;
      }

      const payload = {
        contents: [{ role: "user", parts: [{ text: finalInputToSend }] }],
        generationConfig: { responseMimeType: "text/plain" },
      };

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${MODEL_ID}:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        }
      );

      const data = await response.json();
      const reply = data.candidates?.[0]?.content?.parts?.[0]?.text ?? "AI couldn't generate a reply.";

      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), sender: "ai", text: reply },
      ]);

      // CLEAR parsedPdfText and fileName here to prevent duplicate sending
      setParsedPdfText("");
      setFileName("");
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), sender: "system", text: "Error fetching response." },
      ]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file && file.type === "application/pdf") {
      setParsedPdfText("");
      setFileName(file.name);

      // Show system message only once per file upload
      setMessages((prev) => [
        ...prev,
        {
          id: crypto.randomUUID(),
          sender: "system",
          text: `ðŸ“„ 1 file uploaded: ${file.name}`,
        },
      ]);
      parsePDF(file);
    }
  };

  const parsePDF = (file: File) => {
    const reader = new FileReader();
    reader.onload = async () => {
      const typedarray = new Uint8Array(reader.result as ArrayBuffer);

      const script = document.createElement("script");
      script.src = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js";
      script.onload = async () => {
        // @ts-ignore
        pdfjsLib.GlobalWorkerOptions.workerSrc =
          "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js";
        // @ts-ignore
        const pdf = await pdfjsLib.getDocument(typedarray).promise;
        let fullText = "";
        for (let i = 1; i <= pdf.numPages; i++) {
          const page = await pdf.getPage(i);
          const textContent = await page.getTextContent();
          const pageText = textContent.items.map((item: any) => item.str).join(" ");
          fullText += `\n\nPage ${i}:\n${pageText}`;
        }
        setParsedPdfText(fullText);
        console.log("ðŸ“„ Parsed PDF Text:", fullText);
      };
      document.body.appendChild(script);
    };
    reader.readAsArrayBuffer(file);
  };

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Sidebar */}
      <div
        className={`fixed top-0 left-0 h-full bg-gray-800 w-64 z-50 p-4 transition-transform ${
          historyOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Chat History</h2>
          <X className="cursor-pointer" onClick={() => setHistoryOpen(false)} />
        </div>
        <ScrollArea className="h-[90%] space-y-4 pr-2">
          {messages
            .filter((msg) => msg.sender === "user" || msg.sender === "ai")
            .map((msg) => (
              <div
                key={msg.id}
                className={`p-2 rounded-lg text-sm ${
                  msg.sender === "user" ? "bg-gray-700" : "bg-gray-600"
                }`}
              >
                <strong>{msg.sender === "user" ? "You:" : "AI:"} </strong>
                {msg.text}
              </div>
            ))}
        </ScrollArea>
      </div>

      {/* Chat Area */}
      <div className="flex flex-col flex-grow ml-0 w-full md:ml-64">
        <div className="flex items-center p-4 border-b border-gray-700">
          <Menu className="cursor-pointer mr-4" onClick={() => setHistoryOpen(true)} />
          <h1 className="text-2xl font-bold">Rick's Chatbot</h1>
        </div>

        <ScrollArea className="flex-1 p-4 overflow-y-auto">
          <div className="space-y-6">{/* Add spacing between messages */}
            {messages.map((msg) => (
              <div
                key={msg.id}
                className={`max-w-[80%] p-3 rounded-xl shadow-md ${
                  msg.sender === "user"
                    ? "ml-auto bg-gray-700"
                    : msg.sender === "ai"
                    ? "mr-auto bg-gray-600"
                    : "mx-auto bg-gray-800"
                }`}
              >
                {msg.text}
              </div>
            ))}
            {isTyping && (
              <div className="mr-auto bg-gray-600 max-w-[60%] p-3 rounded-xl animate-pulse">
                AI is typing...
              </div>
            )}
            <div ref={bottomRef} />
          </div>
        </ScrollArea>

        <div className="p-4 border-t border-gray-700 flex gap-2 items-center">
          <Button
            variant="ghost"
            className="text-gray-400 hover:text-white"
            onClick={() => fileInputRef.current?.click()}
          >
            <Paperclip />
          </Button>
          <input
            type="file"
            accept="application/pdf"
            ref={fileInputRef}
            onChange={handleFileUpload}
            className="hidden"
          />

          <Input
            placeholder="Type your message..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") handleSend();
            }}
            className="flex-1 text-lg bg-gray-800 border-gray-700"
          />

          <Button
            onClick={handleSend}
            className="bg-gray-700 font-bold text-lg hover:bg-gray-600"
          >
            Send
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ChatBot;
